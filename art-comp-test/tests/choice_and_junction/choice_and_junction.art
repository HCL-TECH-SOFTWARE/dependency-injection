capsule Top 
{
    [[rt::header_preface]]
    `
        #include <string>
    `
    [[rt::impl_preface]]
    `
        #include "testlib.art.h"
    `
    [[rt::decl]]
    `
    private: 
        unsigned int count = 0, timeout1_count = 0, timeout2_count = 0;        
        std::string result;
        void tick() {
            count++;
            ticker.informIn(RTTimespec(0,0), &count, &RTType_int);
        }
    `

    behavior port ticker : Timing;

    statemachine {
        initial -> R1;
        state R1 {
            entry
            `            
                tick();
            `;
        };
        junction j1;
        timeout1: R1 -> j1 on ticker.timeout 
        `
            timeout1_count++;
        `;
        junction_first: j1 -> R1 when `*static_cast<const int*>(rtdata) == 1`
        `
            result += "junction_first ";
        `;
        junction_second: j1 -> R1 when `*static_cast<const int*>(rtdata) == 2`
        `
            result += "junction_second ";
        `;
        proceed: R1 -> S1 on ticker.timeout
        `
            std::cout << "result = " << result << std::endl;
            ASSERT(result == "junction_first junction_second ", "All junction branches should have executed in order");
            std::cout << "timeout1_count = " << timeout1_count << std::endl;
            ASSERT(timeout1_count == 2, "By now timeout1 should have executed 2 times");
            std::cout << "Resetting count and result..." << std::endl;
            count = 0;
            result = "";
        `;

        state S1 {
            entry
            `
                tick();
            `;
        };

        choice c1;
        timeout2: S1 -> c1 on ticker.timeout
        `
            timeout2_count++;
        `;
        choice_first: c1 -> S1 when `*static_cast<const int*>(rtdata) == 1`
        `
            result += "choice_first ";
        `;
        choice_second: c1 -> S1 when `*static_cast<const int*>(rtdata) == 2`
        `
            result += "choice_second ";
        `;
        choice_else: c1 -> T1 when `else` 
        `
            result += "choice_else ";
        `;                      

        state T1 {
            entry
            `
                std::cout << "result = " << result << std::endl;
                ASSERT(result == "choice_first choice_second choice_else ", "All choice branches should have executed in order");
                std::cout << "timeout2_count = " << timeout2_count << std::endl;
                ASSERT(timeout2_count == 3, "By now timeout2 should have executed 3 times");
                PASS();
            `;
        };
    };
};
