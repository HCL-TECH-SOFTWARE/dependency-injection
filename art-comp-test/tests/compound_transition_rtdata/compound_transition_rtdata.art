protocol PROT {
    out msg(`double`);
};

capsule Top 
{     
    part sender : Sender;
    part receiver : Receiver;
    
    connect sender.p with receiver.p;

    statemachine {
        state State1;
        initial -> State1;
    };
};

capsule Sender {        
    service behavior port p : PROT;

    statemachine {
        state State;
        initial -> State 
        `           
            p.msg(3.14).send();
        `;
    };
};

capsule Receiver {
    [[rt::impl_preface]]
    `
        #include "testlib.art.h"        
    `   

    service behavior port p~ : PROT;

    statemachine {
        state State1 {
            entrypoint ep1;
            exitpoint ex1;
            state Inner;
            t1: ep1 -> Inner;
            t2: Inner -> ex1 on p.msg
            `                
                const double d = *rtdata;
                ASSERT(d == 3.14, "rtdata in first transition had an unexpected value");
            `;
        };
        state State2 {
            entry
            `
                PASS();
            `;
        };
        t3: State1.ex1 -> State2 
        `
            const double d = *rtdata;
            ASSERT(d == 3.14, "rtdata in second transition had an unexpected value");
        `;
        initial -> State1.ep1;
    };
};