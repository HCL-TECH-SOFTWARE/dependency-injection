protocol DerivedProtocol : BaseProtocol {
    out msg_derived(`int`);
    out redefine msg_base(`bool`); // Redefines event BaseProtocol::msg_base (changes its parameter type)
};

capsule Top 
{     
    part sender : Sender;
    part receiver : Receiver;
    
    connect sender.p with receiver.p;
    connect sender.p_base with receiver.p_base;

    statemachine {
        state State;
        initial -> State;
    };
};

capsule Sender {     
    [[rt::impl_preface]]
    `
        #include "testlib.art.h"        
    `      
    service behavior port p : DerivedProtocol;
    service behavior port p_base : BaseProtocol;

    statemachine {
        state State;
        initial -> State 
        `
            p.sendTypeCheckEnable(1);
            p_base.sendTypeCheckEnable(1);
            ASSERT(p.msg_base(true).send() == 1, "Failed to send redefining event defined in derived protocol");
            ASSERT(p_base.msg_base(3.14).send() == 1, "Failed to send redefined event defined in base protocol");
        `;
    };
};

capsule Receiver {
    [[rt::impl_preface]]
    `
        #include "testlib.art.h"        
    `   

    service behavior port p~ : DerivedProtocol; 
    service behavior port p_base~ : BaseProtocol;

    statemachine {
        state S1, S2, S3 {
            entry
            `
                PASS();
            `;
        };
        t1: S1 -> S2 on p.msg_base
        `
            const bool b = *rtdata;
            ASSERT(b, "rtdata in first transition had an unexpected value");
        `;
        t2: S2 -> S3 on p_base.msg_base
        `
            const double d = *rtdata;
            ASSERT(d == 3.14, "rtdata in second transition had an unexpected value");
        `;
        initial -> S1;
    };
};